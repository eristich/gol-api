# This is a basic workflow to help you get started with Action

name: Game of Life - Deploy Staging

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "dev" ]
  pull_request:
    branches: [ "dev" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3
      
      # Create .env.dev file
      - name: Create .env.dev file
        run: |
          echo "APP_ENV=dev" >> .env.dev
          echo "APP_SECRET=$(openssl rand -hex 16)" >> .env.dev
          echo "JWT_PASSPHRASE=$(openssl rand -hex 32)" >> .env.dev
          echo "JWT_SECRET_KEY=%kernel.project_dir%/config/jwt/private.pem" >> .env.dev
          echo "JWT_PUBLIC_KEY=%kernel.project_dir%/config/jwt/public.pem" >> .env.dev
          echo "DATABASE_URL=\"postgresql://${{ secrets.POSTGRES_USER }}:${{ secrets.POSTGRES_PASSWORD }}@gol-db:5432/gol?serverVersion=15&charset=utf8\"" >> .env.dev

      # Copy docker-compose and .env files to target server
      - name: copy files to target server via scp
        uses: appleboy/scp-action@v0.1.3
        with:
          host: ${{ secrets.DEPLOY_HOST }}
          username: ${{ secrets.DEPLOY_USERNAME }}
          port: 22
          key: ${{ secrets.DEPLOY_KEY }}
          source: "./*"
          target: "~/.deploy/${{ github.event.repository.name }}/"

      - name: remote docker-compose up via ssh
        uses: appleboy/ssh-action@v0.1.5
        env:
          POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
          APP_DOMAIN: ${{ secrets.APP_DOMAIN }}
        with:
          host: ${{ secrets.DEPLOY_HOST }}
          username: ${{ secrets.DEPLOY_USERNAME }}
          key: ${{ secrets.DEPLOY_KEY }}
          port: 22
          script: |
            cd ~/.deploy/${{ github.event.repository.name }}
            POSTGRES_USER=${{ secrets.POSTGRES_USER }} POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }} APP_DOMAIN=${{ secrets.APP_DOMAIN }} docker compose -f ./compose.staging.yml down -v
            POSTGRES_USER=${{ secrets.POSTGRES_USER }} POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }} APP_DOMAIN=${{ secrets.APP_DOMAIN }} docker compose -f ./compose.staging.yml up -d --build --force-recreate